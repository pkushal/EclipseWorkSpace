The main idea is to make the threads run simultaneously.

The two ways to implement the threads in java is:
	1. extend the Thread class
	2. implement the runnable class and pass it to the constructor
	   of the thread class.

	3. If we just have one thread to run and we don't want to take the hassle to make all these then we can use the anonymous class and make it easy.


Option 1:
package demo1;

class Runner extends Thread {

	@Override
	//Need to override the run method and once I do start(), it will look for the run method
	public void run() {
		for (int i = 0; i < 10; i++) {
			System.out.println("hello " + i);
		}
		try {
			Thread.sleep(1000); // need to surround the sleep with try and catch block
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}

public class App {
	public static void main(String[] args) {
		Runner runner1 = new Runner();
		runner1.start(); // do not do runner1.run(); just start the thread
		
		Runner runner2 = new Runner();
		runner2.start();
	}
}


Option 2:

class Runner implements Runnable {

	@Override
	public void run() {
		for (int i = 0; i < 10; i++) {
			System.out.println("hello " + i);
		}
		try {
			Thread.sleep(100);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}

public class App2 {
	public static void main(String[] args) {
		Thread t1 = new Thread(new Runner());
		Thread t2 = new Thread(new Runner());
		t1.start();
		t2.start();
	}
}



Option 3:

/*
 * Here we have instantiated the Thread class and passed the instance of the Runnable in the constructor.
 * To make the instance of the Runnable we have use the anonymous class as Runnable is a interface.
 * Finally start the thread
 */
public class App3 {
	public static void main(String[] args) {
		Thread t1 = new Thread(new Runnable() {

			@Override
			public void run() {
				for (int i = 0; i < 10; i++) {
					System.out.println("hello " + i);
				}
				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}

		});
		t1.start();
	}
}



Basic synchronization:

The volatile keyword prevents thread caching the variables when
they are not changing the variables. In the process of optimizing  java will decide that, I am not changing a variable,
say,x so I am not gonna look for it every time and I am gonna cache it. But what might happens some other can change that variable x and in that case the first thread will not know.
So we use the volatile keyword infront of those variables and make sure they are not cached.

import java.util.Scanner;

/*
 * Volatile keyword prevents caching the variables when they are not changed by that thread.
 */
class Processor extends Thread {
	private volatile boolean running = true;

	public void run() {
		while (running) {
			for (int i = 0; i < 10; i++) {
				System.out.println("hello " + i);
			}
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	public void shutDown() {
		running = false;
	}
}

public class App_Volatile_KeyWord {
	public static void main(String[] args) {
		Processor proc1 = new Processor();
		proc1.start();

		System.out.println("Press Enter to stop: ");
		Scanner scan = new Scanner(System.in);
		scan.nextLine();
		proc1.shutDown();
	}
}


The next problem is interleaving... multiple thread has to access a variable and increase the count by one. If all the threads access the variable at once, then they will all read the same value and all incresase by 1, when they had to increase the count one by one.



package basicThreadSynchronization;

public class App_synchronized_keyword {
	private int count = 0;

	public void doWork() {

		Thread t1 = new Thread(new Runnable() {

			@Override
			public void run() {
				for (int i = 0; i < 10000; i++) {
					count++;
				}
			}
		});

		Thread t2 = new Thread(new Runnable() {

			@Override
			public void run() {
				for (int i = 0; i < 10000; i++) {
					count++;
				}

			}
		});

		t1.start();
		t2.start();
		/*
		 * here the problem is that all the run will run simultaneously and the
		 * thread that runs the main method of the program will also be
		 * executing simultaneously. so when I do syso, the it will display the
		 * current value of the count It will not wait for the threads t1 and t2
		 * to complete their task. To address this problem we need to invoke the
		 * join method on the thread t1 and t2. The join method will pause the
		 * thread that has called the t1 thread, i.e., main thread until the
		 * thread t1 finishes what it needs to do.
		 */
		try {
			t1.join();
			t2.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		/*
		 * Now the interleaving problem:
		 * To address the interleaving problem, we can make that integer atomic. Atomic Integer is a specialized class that has a method which can make
		 * the increment in one step insted of 3 steps like in count++(count= count+1... step 1: load the value of count, step 2: increment the count, step 3: 
		 * load the value of count)
		 */
		
		System.out
				.println("Expected count value is 20000, the count value is: "
						+ count);
	}

	public static void main(String[] args) {
		App_synchronized_keyword app = new App_synchronized_keyword();
		app.doWork();
	}
}


Solution: 
Synchronized keyword

package basicThreadSynchronization;

/*
 * Every object in java has a intrinsic lock and it can be access by one thread at one time. After the thread is done processing, it will release the
 * intrinsic lock so that others can use it. The method with synchronized keyword needs to have that intrinsic lock to process further. This will solve the 
 * problem as only one thread can increment at once and there will be no interleaving. This intrinsic lock is aka mutex.
 */
public class App_synchronized_keyword {
	private int count = 0;

	public synchronized void increment() {
		count++;
	}

	public void doWork() {

		Thread t1 = new Thread(new Runnable() {

			@Override
			public void run() {
				for (int i = 0; i < 10000; i++) {
					increment();
				}
			}
		});

		Thread t2 = new Thread(new Runnable() {

			@Override
			public void run() {
				for (int i = 0; i < 10000; i++) {
					increment();
				}

			}
		});

		t1.start();
		t2.start();

		try {
			t1.join();
			t2.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	
		System.out
				.println("Expected count value is 20000, the count value is: "
						+ count);
	}

	public static void main(String[] args) {
		App_synchronized_keyword app = new App_synchronized_keyword();
		app.doWork();
	}
}


IF WE ARE USING THE SYNCHRONIZED KEYWORD, THEN NO NEED TO 
USE THE VOLATILE KEYWORD.
VOLATILE KEYWORD WILL MAKE THE VARIABLES VISIBLE FROM ALL THREADS



Multiple Locks:
If I have a method, inside which two independent tasks are going on, and If do synchronized on the top method then it will now allow the inside inddependent processes to run.
This is because we have only intrinsic lock.
Solution: Create your own lock 

That problem is shown below:


public class App {
	public static void main(String[] args) {
		new Worker().main();
	}
}


package multipleLocks;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Worker {
	private Random random = new Random();
	
	private List<Integer> list1 = new ArrayList<>();
	private List<Integer> list2 = new ArrayList<>();

	public synchronized void stageOne() {
		try {
			Thread.sleep(1);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		list1.add(random.nextInt(100));
	}

	public synchronized void stageTwo() {
		try {
			Thread.sleep(1);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		list2.add(random.nextInt(100));
	}

	public void process() {
		for (int i = 0; i < 1000; i++) {
			stageOne();
			stageTwo();
		}
	}

	public void main() {
		System.out.println("Starting...");
		long start = System.currentTimeMillis();
		Thread t1 = new Thread(new Runnable() {

			@Override
			public void run() {
				process();
			}

		});

		Thread t2 = new Thread(new Runnable() {

			@Override
			public void run() {
				process();
			}

		});
		t1.start();
		t2.start();
		try {
			t1.join();
			t2.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		long end = System.currentTimeMillis();
		System.out.println("Time taken: " + (end - start));
		System.out.println("list 1: " + list1.size() + " List 2: "
				+ list2.size());
	}

}



SO,

package multipleLocks;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Worker {
	private Random random = new Random();

	private Object lock1 = new Object();
	private Object lock2 = new Object();

	/*
	 * You can also lock on the actual object you want to write to like, list1 and list2 
	 * in this case..but it is not recommended, it will give you problems and complicate things
	 * So make a separate lock objects to avoid confusion.
	 */
	private List<Integer> list1 = new ArrayList<>();
	private List<Integer> list2 = new ArrayList<>();

	public void stageOne() {
		synchronized (lock1) {
			try {
				Thread.sleep(1);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			list1.add(random.nextInt(100));
		}
	}

	public void stageTwo() {
		synchronized (lock2) {
			try {
				Thread.sleep(1);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			list2.add(random.nextInt(100));

		}
	}

	public void process() {
		for (int i = 0; i < 1000; i++) {
			stageOne();
			stageTwo();
		}
	}

	public void main() {
		System.out.println("Starting...");
		long start = System.currentTimeMillis();
		Thread t1 = new Thread(new Runnable() {

			@Override
			public void run() {
				process();
			}

		});

		Thread t2 = new Thread(new Runnable() {

			@Override
			public void run() {
				process();
			}

		});
		t1.start();
		t2.start();
		try {
			t1.join();
			t2.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		long end = System.currentTimeMillis();
		System.out.println("Time taken: " + (end - start));
		System.out.println("list 1: " + list1.size() + " List 2: "
				+ list2.size());
	}

}



Thread Pools:
Way of managing lots of thread at the same time. Here instead of using the Thread class to individually manage the threads, we have to use the ExecutorService to manage more thread and have more control.


package threadPool;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

class Processor implements Runnable {
	private int id;
	public Processor(int id) {
		this.id = id;
	}
	@Override
	public void run() {
		System.out.println("Starting the id: " + id);
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.out.println("Completed: " + id);
	}
}

public class App {
	public static void main(String[] args) {
		/*Instead of using the thread class we are using the executorService class
		Thread pool is like having number of workers in a factory.
		When the thread complete one task they start the new task from the bunch of tasks given*/
		
		ExecutorService executor = Executors.newFixedThreadPool(3);
		
		for (int i = 0; i < 5; i++) {
			executor.submit(new Processor(i));
		}
		
		// Managerial method of the executor; stops accepting new task after completing what all the thread  are doing.
		executor.shutdown();

		System.out.println("All task submitted to the Executor and I am not accepting any more task");

		try {
			// time I want to wait for the executor to complete the given task, if not completed, it will leave the task
			executor.awaitTermination(1, TimeUnit.DAYS);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		System.out.println("All tasks completed");
	}
}




CountDown Latches:

CountDownLatch is a thread safe class in java. No need to worry about the thread synchonization.
It will let you count down from the number you specify and it lets one or more thread wait until the latch reaches the count of zero


package countDownLatches;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

class Processor implements Runnable {
	private CountDownLatch latch;

	public Processor(CountDownLatch latch) {
		this.latch = latch;
	}

	@Override
	public void run() {
		System.out.println("Started");
		try {
			Thread.sleep(3000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		latch.countDown();
	}

}

public class App {
	public static void main(String[] args) {

		CountDownLatch latch = new CountDownLatch(3);
		ExecutorService executor = Executors.newFixedThreadPool(3);

		for (int i = 0; i < 3; i++) {
			executor.submit(new Processor(latch));
			/*
			 * all the threads will execute the run method and call latch.countDown() after waiting 3
			 * seconds, which will decrement the count 3 defined in the new CountDown(3). Once the count reaches 0
			 * then the latch.await() will be released and then do the code defined afterwards, here it will display 
			 * completed...
			 * 
			 * the CountDownLatch is thread safe so we don't have to do the synchronized keyword.
			 */
		}
		try {
			latch.await();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("Completed....");
	}
}



ProducerConsumer Pattern/Blocking Queues:

package producerConsumer;

import java.util.Random;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

public class App {
	// this is thread safe and we do not need to worry about the thread synchronization
	// This is like a thread safe queue with good taken() and put() methods.
	private static BlockingQueue<Integer> queue = new ArrayBlockingQueue<Integer>(
			10);

	public static void main(String[] args) throws InterruptedException {
		Thread t1 = new Thread(new Runnable() {
			public void run() {
				try {
					producer();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		});

		Thread t2 = new Thread(new Runnable() {
			public void run() {
				try {
					consumer();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		});
		t1.start();
		t2.start();
		t1.join();
		t2.join();
	}

	private static void producer() throws InterruptedException {
		Random random = new Random();
		while (true) {
			// this will generate the random number between 0 and 99
			queue.put(random.nextInt(100));// if the queue is full, it will wait
											// until there is some deletion.
		}
	}

	private static void consumer() throws InterruptedException {
		Random random = new Random();

		while (true) {
			Thread.sleep(100);
			if (random.nextInt(10) == 0) {
				Integer value = queue.take(); // take will wait if the queue is
												// empty.
				System.out.println("Taken value: " + value
						+ " and Queue size is : " + queue.size());
			}
		}
	}
}




Wait and notify methods:

public class Processor {
	public void produce() throws InterruptedException {
		// synchronized on the processor Object i.e. intrinsic lock of the
		// processor
		synchronized (this) {
			System.out.println("Producer Thread Running");
			/*
			 * This wait will wait s.t it will not consume lot of resource After
			 * encountering the wait() method, it relinquishes the lock object
			 * and only regain it when some other tells it to wakeup via a
			 * notify method or notifyAll method. It can be called only in the
			 * synchronized block
			 */
			wait();
			System.out.println("Producer Resumed after the wait() method");
		}
	}

	public void consume() throws InterruptedException {
		System.out.println("Hi I am thread 2 running simultaneously with Thread 1");
		Scanner scanner = new Scanner(System.in);
		// this sleep will make sure that the produce will start first.
		Thread.sleep(2000);
		synchronized (this) {
			System.out.println("Waiting for the enter key...");
			scanner.nextLine();
			System.out.println("Enter key pressed...");
			// this will notify the threads locked on the same object, here the processor object
			//but doesn't yet relinquish the control yet so after notify is called close the synchronized block
			// no codes after that.
			notify();
			
		}
	}
}



Reentrant Locks:
/*
 * Reentrant lock is an alternative to using the synchronized keyword
 */
public class App {
	public static void main(String[] args) throws InterruptedException {
		final Runner runner = new Runner();
		Thread t1 = new Thread(new Runnable() {

			@Override
			public void run() {
				try {
					runner.firstThread();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});
		Thread t2 = new Thread(new Runnable() {

			@Override
			public void run() {
				try {
					runner.SecondThread();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});

		t1.start();
		t2.start();
		t1.join();
		t2.join();
		runner.finished();
	}
}

/*
 * This reentrant lock is alternative for the synchronized block
 */
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Runner {
	private int count = 0;
	private Lock lock = new ReentrantLock();

	private void increment() {
		for (int i = 0; i < 10000; i++) {
			count++;
		}
	}

	public void firstThread() throws InterruptedException {
		lock.lock();
		/*
		 * If there is expection in the increment() method, then it will never
		 * be able to unlock the lock so better to surround it with try and
		 * finally block which is confirmed to be called.
		 */
		try {
			increment();
		} finally {
			lock.unlock();
		}
	}

	public void SecondThread() throws InterruptedException {
		lock.lock();
		try {
			increment();
		} finally {
			lock.unlock();
		}
	}

	public void finished() {
		System.out.println("Count is: " + count);
	}

}

wait and notify in reentrant Locks:
need to use the Condition class


import java.util.Scanner;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Runner {
	private int count = 0;
	private Lock lock = new ReentrantLock();

	private Condition cond = lock.newCondition();

	private void increment() {
		for (int i = 0; i < 10000; i++) {
			count++;
		}
	}

	public void firstThread() throws InterruptedException {
		lock.lock();
		System.out.println("Waiting......");
		// await() works same as wait in the synchronized block
		cond.await();
		System.out.println("Cond waken up by the signal method");
		/*
		 * If there is exception in the increment() method, then it will never
		 * be able to unlock the lock so better to surround it with try and
		 * finally block which is confirmed to be called.
		 */
		try {
			increment();
		} finally {
			lock.unlock();
		}
	}

	public void SecondThread() throws InterruptedException {
		Thread.sleep(1000);
		lock.lock();
		System.out.println("Press the enter key...");
		new Scanner(System.in).nextLine();
		System.out.println("Got the enter key..");
		
		cond.signal();
		
		try {
			increment();
		} finally {
			//very important to unlock the lock, if not the thread in the firstThread will not get the control to the lock
			lock.unlock();
		}
	}

	public void finished() {
		System.out.println("Count is: " + count);
	}

}




Semaphore:

	public static void main(String[] args) throws InterruptedException {
		/*
		 * Semaphore is a object that maintains a count and we refer to the
		 * counts as available permits of the semaphore
		 */
		Semaphore sem = new Semaphore(1);

		sem.release(); // this will increment the permits.
		sem.acquire();// this will decrement the permits... it will wait if
						// there is no permit to acquire
		/*
		 * With permits equal to 1, the release and acquire is like lock and
		 * unlock. The difference between lock and semaphore is that the lock
		 * has to be released from the same thread while the semaphore can be
		 * unlocked from any thread.
		 * 
		 * It is used to control the access to some resource.
		 */
		System.out.println("Available permits: " + sem.availablePermits());
	}